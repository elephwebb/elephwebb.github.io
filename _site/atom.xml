<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2018-02-19T23:57:42-03:00</updated><id>http://localhost:4000/</id><title type="html">ElephWebb.io</title><author><name>elephwebb</name></author><entry><title type="html">Building a Test-Driven REST Subscription API</title><link href="http://localhost:4000/posts/2018-02-19-building-a-test-driven-rest-subscription-api/" rel="alternate" type="text/html" title="Building a Test-Driven REST Subscription API" /><published>2018-02-19T00:00:00-03:00</published><updated>2017-12-05T21:00:00-03:00</updated><id>http://localhost:4000/posts/building-a-test-driven-rest-subscription-api</id><content type="html" xml:base="http://localhost:4000/posts/2018-02-19-building-a-test-driven-rest-subscription-api/">&lt;h2 id=&quot;what-we-will-build&quot;&gt;What we will build?&lt;/h2&gt;

&lt;p&gt;We’re going to build a Subscription System API for Online Services using &lt;a href=&quot;https://spring.io/understanding/REST&quot;&gt;REST&lt;/a&gt; and PHP Laravel 5.4/5.5.&lt;/p&gt;

&lt;p&gt;The API will implement different Payment Gateways like (Stripe, PayPal), it contains User Authentication and Registration using OAuth - JWT protocol for security.&lt;/p&gt;

&lt;p&gt;The code source and online API can be found in &lt;a href=&quot;'https://www.github.com/elephwebb/test-driven-subscription-api'&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;quick-summary&quot;&gt;Quick Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#toolbelt&quot;&gt;Toolbelt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#business-model&quot;&gt;Define Business Model&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#requirements&quot;&gt;Requirements with KanBan&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rest-api-endpoints&quot;&gt;API Endpoints&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#design-api&quot;&gt;Design API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pre-testing-the-api&quot;&gt;Pre Testing the API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#development-environment&quot;&gt;Development Environment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#git-workflow&quot;&gt;Git Workflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#code&quot;&gt;Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#push-always&quot;&gt;Push Always&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#deploy&quot;&gt;Deploy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will in future dive the section &lt;a href=&quot;#code&quot;&gt;Code&lt;/a&gt; in small chunks for better readability.&lt;/p&gt;

&lt;p&gt;To follow a test-driven approach we will apply the cycle Red-Green-Refactor and pay attention to False Green/Successful Tests&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Unless all &lt;a href=&quot;#requirements&quot;&gt;Requirements&lt;/a&gt; are completed do&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#writing-tests&quot;&gt;Green tests first&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#red&quot;&gt;Red&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#refactoring&quot;&gt;Refactoring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#commit-commit-commit&quot;&gt;Commit Commit Commit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#repeating-the-cycle&quot;&gt;Repeating the cycle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;endif&lt;/p&gt;

&lt;h2 id=&quot;toolbelt&quot;&gt;ToolBelt&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;GIT, Varnish AND/OR &lt;a href=&quot;http://laradock.io/&quot;&gt;Docker&lt;/a&gt; - Development Environment&lt;/li&gt;
  &lt;li&gt;PHP Laravel, OOP, SOLID, Design Patterns&lt;/li&gt;
  &lt;li&gt;Swagger for API Design&lt;/li&gt;
  &lt;li&gt;Postman / SoapUI for simple tests on endpoints&lt;/li&gt;
  &lt;li&gt;TravisCI for Continous Integration&lt;/li&gt;
  &lt;li&gt;Loader.io for benchmark&lt;/li&gt;
  &lt;li&gt;Heroku to publish our API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will design it using &lt;a href=&quot;https://swagger.io/&quot;&gt;Swagger&lt;/a&gt; and &lt;a href=&quot;https://apiary.io/&quot;&gt;APIRY&lt;/a&gt;, you pick the one that is most comfortable to you.&lt;/p&gt;

&lt;p&gt;Basically the idea is to document the Endpoints using a standard so it’s easier to design, test and colaborate with others developers, so it’s clear what the API does or not without spend time write down software to implement it. It’s important spend some time think what we want to accomplish, what we want to build.&lt;/p&gt;

&lt;p&gt;That is our first move toward a &lt;strong&gt;better code&lt;/strong&gt; and &lt;strong&gt;client happiness&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After that we will dive in actually develop it with tests and Laravel best practices in mind to detect errors and behaviors quickly, use SOLID principles and Design Patterns to build an application that can scale.&lt;/p&gt;

&lt;p&gt;Push the code with GIT to TravisCI which will automate some tests before deploy to our server, in our case, Heroku.&lt;/p&gt;

&lt;p&gt;To monitor the perfomance of our API we will use &lt;a href=&quot;https://loader.io/&quot;&gt;Loader.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will use &lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt; to check the responses from the API, we also will try out &lt;a href=&quot;https://www.soapui.org/&quot;&gt;SoapUI&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;First of all, why would you like to build an API, it’s crucial to understand the reason behind and why it’s so popular nowadays.&lt;/p&gt;

&lt;p&gt;It follows a software architecture called &lt;a href=&quot;https://martinfowler.com/articles/microservices.html&quot;&gt;Micro Services&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;cite&gt;In short, the microservice architectural style [1] is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. &lt;a href=&quot;https://martinfowler.com/&quot;&gt;Martin Fowler&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/boicy&quot;&gt;James Lewis&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Not get in too much detail about it and focus on the practical side of code using a test-driven aproach as a key factor inside the &lt;a href=&quot;http://agilemanifesto.org/principles.html&quot;&gt;Agile Methodology&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I definetly advice take a look at &lt;a href=&quot;https://geemus.gitbooks.io/http-api-design/content/en/&quot;&gt;HTTP API Designs&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;As Phil Sturgeon suggest in his book &lt;a href=&quot;https://www.amazon.com/?afiliate_program=jhonyvidal&quot;&gt;Building APIs you don’t hate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Define the API endpoints even if in a piece of paper (or initially)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[ ] &lt;a href=&quot;#business-model&quot;&gt;Business Model&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[ ] &lt;a href=&quot;#api-endpoints&quot;&gt;API Endpoints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;business-model&quot;&gt;Business Model&lt;/h2&gt;
&lt;p&gt;Draw of interaction narrows. Pass this to Aurelio + documentation + code in Server. Just add a different package types with price plan: monthly - payment method, discount_percentage - payment method, anual -&lt;/p&gt;

&lt;p&gt;plan_payment_methods.&lt;/p&gt;

&lt;p&gt;Downgrade anytime. In case payment failure then your account will downgrade to free again. All your data, equipments will be kept. – Free: until 3 equipamentos, 1 user, 15 days with a public ad-profile in companies search by service. WhatsApp Plugin register / add contact – jekyll guy, direct quotes on profile. inform your phone and whatsapp contact.. post jobs.&lt;/p&gt;

&lt;p&gt;packages: free, monthly(debit), yearly. payment_methods: credit_card until 12 times. 20% discount or boleto.&lt;/p&gt;

&lt;p&gt;DDD, Domain Driven Design PHP, In Laravel??&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;Add Image GIT KanBan and Shared Link to KanBanchi&lt;/p&gt;

&lt;p&gt;User Model
User registration :: events email - emailcatcher
	—- Type::
		—- Regular
		—- Empresa
		—- Company/Cliente&lt;/p&gt;

&lt;p&gt;Transaction on Cliente Registration, to create admin user.
	call createAdminUser(UserType $type)
			_setAdminPermissions()&lt;/p&gt;

&lt;p&gt;Internally Admin or Users with Create User Permission.
Othersiwe createUser()
		  _setUserRoles(Roles $role)
		  _setUserPermissions(array $permissions)&lt;/p&gt;

&lt;p&gt;User authentication
User recovery password
User revoke key
Package (what is our service) how many books can download
Plan
Payment — callback — payment gateway&lt;/p&gt;

&lt;h2 id=&quot;rest-api-endpoints&quot;&gt;REST API Endpoints&lt;/h2&gt;

&lt;h2 id=&quot;design-api&quot;&gt;Design Api&lt;/h2&gt;

&lt;h2 id=&quot;pre-testing-the-api&quot;&gt;Pre Testing The Api&lt;/h2&gt;

&lt;p&gt;APIRY, CURL and Postman…&lt;/p&gt;

&lt;h2 id=&quot;development-environment&quot;&gt;Development Environment&lt;/h2&gt;

&lt;h2 id=&quot;git-workflow&quot;&gt;Git Workflow&lt;/h2&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;p&gt;Bunch of code following a sequential logic and applying essential tests&lt;/p&gt;

&lt;p&gt;Follow good practices, talk about SOLID, Design Patterns, DRY&lt;/p&gt;

&lt;h2 id=&quot;push-always&quot;&gt;Push Always&lt;/h2&gt;

&lt;h2 id=&quot;deploy&quot;&gt;Deploy&lt;/h2&gt;</content><author><name>elephwebb</name></author><category term="posts" /><category term="test-driven" /><category term="rest" /><category term="laravel" /><summary type="html">Using best practices</summary></entry><entry><title type="html">How to solve N+1 SQL issues in Laravel</title><link href="http://localhost:4000/posts/2018-01-01-how-solve-n-plus-one-sql-issue-in-laravel/" rel="alternate" type="text/html" title="How to solve N+1 SQL issues in Laravel" /><published>2018-01-01T00:00:00-03:00</published><updated>2018-01-01T00:00:00-03:00</updated><id>http://localhost:4000/posts/how-solve-n-plus-one-sql-issue-in-laravel</id><content type="html" xml:base="http://localhost:4000/posts/2018-01-01-how-solve-n-plus-one-sql-issue-in-laravel/">&lt;p&gt;1.Describe N+1 problem and explain briefly the math behind SQL queries and what to be careful about to get the best from ORMs like Eloquent and the abstraction that it brings;&lt;/p&gt;

&lt;p&gt;2.Identify Posible Solutions and case where to apply&lt;/p&gt;

&lt;p&gt;3.Laravel Solution - EagearLoad, LazyLoad comparasion - App\Posts::with(‘tags’)-&amp;gt;get();&lt;/p&gt;

&lt;p&gt;Add printscreen on troubleshooting with Chrome Dev Tools and Laravel Provider&lt;/p&gt;</content><author><name>elephwebb</name></author><category term="posts" /><summary type="html">1.Describe N+1 problem and explain briefly the math behind SQL queries and what to be careful about to get the best from ORMs like Eloquent and the abstraction that it brings;</summary></entry><entry><title type="html">Building a Test-Driven AngularJS 1.4/1.6</title><link href="http://localhost:4000/posts/2017-07-06-building-a-test-driven-angularjs-crm/" rel="alternate" type="text/html" title="Building a Test-Driven AngularJS 1.4/1.6" /><published>2017-07-06T00:00:00-03:00</published><updated>2017-07-06T00:00:00-03:00</updated><id>http://localhost:4000/posts/building-a-test-driven-angularjs-crm</id><content type="html" xml:base="http://localhost:4000/posts/2017-07-06-building-a-test-driven-angularjs-crm/">&lt;p&gt;&lt;a href=&quot;https://elephwebb.github.io/testDrivenAngularJS-CRM/&quot;&gt;Code source&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This is a full-stack javascript CRM, it will include a node.js API eventually but for now I will be focusing on the frontend and use test-driven $httpBackend to Mock the endpoints.&lt;/p&gt;

&lt;p&gt;Why AngularJS and not Angular2-4 or React or another “modern” framework?&lt;/p&gt;

&lt;p&gt;Just because AngularJS is still a great tool to build enhanced applications which do not require the complexity that thouse other frameworks bring, but still can be “Modern” if we apply javascript good practices, ES6, tools like Browser-Sync and use tests to orient our development. Plus, many web applications out there still use AngularJS and doesn’t have the intention to change so far.&lt;/p&gt;

&lt;p&gt;Lots of the features of our development were extracted from hours of learning and some code hacking, checkout all the &lt;a href=&quot;#resources&quot;&gt;resources below&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setting-the-environment&quot;&gt;Setting the environment&lt;/h2&gt;

&lt;p&gt;Starting coding on top of a solid codebase, that uses &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md&quot;&gt;best practices&lt;/a&gt; from &lt;a href=&quot;https://johnpapa.net/angular-style-guide/&quot;&gt;Jonh Pappa&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;git clone the following repo:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/elephwebb/testDrivenAngularJS-CRM.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;define-requirements&quot;&gt;Define requirements&lt;/h2&gt;

&lt;p&gt;What our CRM will have and what not…&lt;/p&gt;

&lt;h2 id=&quot;continous-delivery&quot;&gt;Continous Delivery&lt;/h2&gt;

&lt;p&gt;Use CircleCI and/or TravisCI to deploy&lt;/p&gt;

&lt;h2 id=&quot;deploy&quot;&gt;Deploy&lt;/h2&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.pluralsight.com/courses/play-by-play-papa-bell&quot;&gt;Pluralsight-Play-by-Play-with-Jonh-Pappa&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.pluralsight.com/paths/angular-js&quot;&gt;AngularJS Complete Learning Path&lt;/a&gt;&lt;/p&gt;</content><author><name>elephwebb</name></author><category term="posts" /><category term="angularJS" /><category term="CRM" /><category term="javascript" /><summary type="html">Using best practices</summary></entry><entry><title type="html">Git Permissions Denied Public Key</title><link href="http://localhost:4000/posts/2017-01-10-git-permission-denied-public-key/" rel="alternate" type="text/html" title="Git Permissions Denied Public Key" /><published>2017-01-10T00:00:00-03:00</published><updated>2017-01-10T00:00:00-03:00</updated><id>http://localhost:4000/posts/git-permission-denied-public-key</id><content type="html" xml:base="http://localhost:4000/posts/2017-01-10-git-permission-denied-public-key/">&lt;p&gt;A common problem that once and while I used to get through:&lt;/p&gt;

&lt;p&gt;Error:
Permission denied (publickey).
fatal: Could not read from remote repository.&lt;/p&gt;

&lt;p&gt;Lets go through the following step/diagnostics:&lt;/p&gt;

&lt;p&gt;Please make sure you have the correct access rights
and the repository exists.&lt;/p&gt;

&lt;h4 id=&quot;1-is-ssh-keys-added-remotely-on-bitbucket-github-gitlab&quot;&gt;1) is SSH Keys added remotely on Bitbucket, GitHub, GitLab?&lt;/h4&gt;

&lt;h4 id=&quot;11-check-your-keys-locally-on-your-unixmac-shell&quot;&gt;1.1) Check your keys locally on your *Unix/Mac shell:&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-add -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The result should look like: (can have more than one, and/or using 4096 hash key)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2048 SHA256:TC7wexj0ceYk3lvtvb0hFc1yQclWl9O0jYvPlJhyWH4 /home/USERNAME/.ssh/id_rsa (RSA)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If doesn’t have SSH keys, generate them, follow the article on Bitbucket to &lt;a href=&quot;https://confluence.atlassian.com/bitbucket/set-up-an-ssh-key-728138079.html&quot;&gt;set SSH keys&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://confluence.atlassian.com/bitbucket/configure-multiple-ssh-identities-for-gitbash-mac-osx-linux-271943168.html?_ga=2.133857606.91896796.1513512003-507030520.1505085689&quot;&gt;For Multiple keys if is the case&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-stepdiagnostic-check-the-connection-with-your-server&quot;&gt;2 step/diagnostic: check the connection with your server&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ssh -Tv git@bitbucket.org
sudo ssh -Tv git@github.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3-stepdiagnostic-check-the-remote-url&quot;&gt;3 step/diagnostic: check the remote url&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote -v

Result 

origin git@bitbucket.org:USERNAMEREPO/REPOSIRTORY.git (fetch)
origin git@bitbucket.org:USERNAMEREPO/REPOSIRTORY.git (push)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Change URL, try:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote set-url origin https://USERNAME@bitbucket.org/USERNAME-REPO/REPOSITORY.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Should look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote -v

origin https://USERNAME@bitbucket.org/USERNAME-REPO/REPOSITORY.git (fetch)

origin https://USERNAME@bitbucket.org/USERNAME-REPO/REPOSITORY.git (push)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;4-stepdiagnostic-check-use-of-sudo-before-git-command-when-is-to-remote-server&quot;&gt;4 step/diagnostic: check use of sudo before git command when is to remote server&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push -u origin master  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;versus&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>elephwebb</name></author><category term="posts" /><category term="Troubleshooting" /><summary type="html">A common problem that once and while I used to get through:</summary></entry></feed>